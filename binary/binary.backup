/*
 * Binary.cpp
 *
 *  Created on: May 8, 2012
 *      Author: dmarce1
 */
#include "../defs.h"
#ifdef BINARY

#include "binary.h"
#include "indexer_2d.h"

#ifdef SCF_CODE
bool Binary::scf_code = true;
#else
bool Binary::scf_code = false;
#endif

Real Binary::M1 = 1.0;
Real Binary::fill_factor = 0.99;
Real Binary::n = 1.5;
Real Binary::R1 = 2.5e-2;
Real Binary::a = 1.0;
Real Binary::q = 0.20;
Real Binary::K1 = -1.0;
Real Binary::K2 = -1.0;
Real Binary::phi0_1 = 0.0;
Real Binary::phi0_2 = 0.0;
Real Binary::scf_dt = 0.2;
Real Binary::phase = 0.0;
Real Binary::Omega0 = 0.0;
Real Binary::l1x = 0.0;
Real Binary::Omega = sqrt((M1 * (q + 1.0) / (a * a * a)));

void Binary::write(FILE* fp) const {
	if (get_level() == 0) {
		Real h;
		bool dummy;
		fwrite(&dummy, sizeof(bool), 1, fp);
		fwrite(&l1x, sizeof(Real), 1, fp);
		fwrite(&h, sizeof(Real), 1, fp);
		fwrite(&M1, sizeof(Real), 1, fp);
		fwrite(&fill_factor, sizeof(Real), 1, fp);
		fwrite(&n, sizeof(Real), 1, fp);
		fwrite(&R1, sizeof(Real), 1, fp);
		fwrite(&q, sizeof(Real), 1, fp);
		fwrite(&a, sizeof(Real), 1, fp);
		fwrite(&K1, sizeof(Real), 1, fp);
		fwrite(&K2, sizeof(Real), 1, fp);
		fwrite(&phi0_1, sizeof(Real), 1, fp);
		fwrite(&phi0_2, sizeof(Real), 1, fp);
		fwrite(&Omega, sizeof(Real), 1, fp);
		fwrite(&phase, sizeof(Real), 1, fp);
		fwrite(&Omega0, sizeof(Real), 1, fp);
		fwrite(&scf_code, sizeof(bool), 1, fp);
	}
	GridNode::write(fp);
}

void Binary::output(grid_output_t* ptr) const {
	for (int k = 0; k < GNX + 1; k++) {
		for (int j = 0; j < GNX + 1; j++) {
			for (int i = 0; i < GNX + 1; i++) {
				Real x, y, z;
				Real p;
				if (Binary::scf_code) {
					p = 0.0;
				} else {
					p = Binary::phase;
				}
				z = zf(k);
				x = cos(p) * xf(i) - sin(p) * yf(j);
				y = cos(p) * yf(j) + sin(p) * xf(i);
				*(ptr->x) = x;
				*(ptr->y) = y;
				*(ptr->z) = z;
				ptr->x++;
				ptr->y++;
				ptr->z++;
			}
		}
	}
	for (int k = bw; k < GNX - bw; k++) {
		for (int j = bw; j < GNX - bw; j++) {
			for (int i = bw; i < GNX - bw; i++) {
				if (zone_is_refined(i, j, k)) {
					continue;
				}
				(ptr->nodelist)[ptr->ni++] = (i + 0) + (GNX + 1) * ((j + 0) + (GNX + 1) * (k + 0)) + ptr->pi;
				(ptr->nodelist)[ptr->ni++] = (i + 1) + (GNX + 1) * ((j + 0) + (GNX + 1) * (k + 0)) + ptr->pi;
				(ptr->nodelist)[ptr->ni++] = (i + 1) + (GNX + 1) * ((j + 1) + (GNX + 1) * (k + 0)) + ptr->pi;
				(ptr->nodelist)[ptr->ni++] = (i + 0) + (GNX + 1) * ((j + 1) + (GNX + 1) * (k + 0)) + ptr->pi;
				(ptr->nodelist)[ptr->ni++] = (i + 0) + (GNX + 1) * ((j + 0) + (GNX + 1) * (k + 1)) + ptr->pi;
				(ptr->nodelist)[ptr->ni++] = (i + 1) + (GNX + 1) * ((j + 0) + (GNX + 1) * (k + 1)) + ptr->pi;
				(ptr->nodelist)[ptr->ni++] = (i + 1) + (GNX + 1) * ((j + 1) + (GNX + 1) * (k + 1)) + ptr->pi;
				(ptr->nodelist)[ptr->ni++] = (i + 0) + (GNX + 1) * ((j + 1) + (GNX + 1) * (k + 1)) + ptr->pi;
				this->load_output(ptr, i, j, k);
				ptr->ei++;
			}
		}
	}
	ptr->pi += GRID_NNODES;
	for (int i = 0; i < OCT_NCHILD; i++) {
		if (this->get_child(i) != NULL) {
			static_cast<const Binary*> (get_child(i))->output(ptr);
		}
	}
}

void Binary::read(FILE* fp) {
	if (get_level() == 0) {
		Real h;
		bool dummy;
		fread(&dummy, sizeof(bool), 1, fp);
		fread(&l1x, sizeof(Real), 1, fp);
		fread(&h, sizeof(Real), 1, fp);
		fread(&M1, sizeof(Real), 1, fp);
		fread(&fill_factor, sizeof(Real), 1, fp);
		fread(&n, sizeof(Real), 1, fp);
		fread(&R1, sizeof(Real), 1, fp);
		fread(&q, sizeof(Real), 1, fp);
		fread(&a, sizeof(Real), 1, fp);
		fread(&K1, sizeof(Real), 1, fp);
		fread(&K2, sizeof(Real), 1, fp);
		fread(&phi0_1, sizeof(Real), 1, fp);
		fread(&phi0_2, sizeof(Real), 1, fp);
		fread(&Omega, sizeof(Real), 1, fp);
		fread(&phase, sizeof(Real), 1, fp);
		fread(&Omega0, sizeof(Real), 1, fp);
		fread(&scf_code, sizeof(bool), 1, fp);
	}
	GridNode::read(fp);
}

void Binary::add_difs(Real a, Real b) {
	const Real O = Binary::Omega;
#pragma omp parallel for collapse(2)
	for (int k = 1; k < PNX - 1; k++) {
		for (int j = 1; j < PNX - 1; j++) {
			for (int i = 1; i < PNX - 1; i++) {
				Real dsum, fx0, fy0, fz0;
				Real angular;
				State s;
				Vector<Real, STATE_NF>* D;
				const int i0 = i + BW - 1;
				const int j0 = j + BW - 1;
				const int k0 = k + BW - 1;
				D = &differential(i0, j0, k0);
				s = (*this)(i0, j0, k0);
				if (!Binary::scf_code) {
					fx0 = 0.5 * s.rho() * (fx(i, j, k) + fx(i + 1, j, k));
					fy0 = 0.5 * s.rho() * (fy(i, j, k) + fy(i, j + 1, k));
					fz0 = 0.5 * s.rho() * (fz(i, j, k) + fz(i, j, k + 1));
					(*D)[State::sz_index] += fz0;
					angular = pxc(i) * fy0 - pyc(j) * fx0;
					(*D)[State::lz_index] += angular;
					(*D)[State::sr_index] += (pxc(i) * fx0 + pyc(j) * fy0) / sqrt(pxc(i) * pxc(i) + pyc(j) * pyc(j));
					(*D)[State::et_index] += (*D)[State::pot_index];
					dsum = 0.0;
					for (int l = 0; l < NRHO; l++) {
						dsum += (*D)[State::d_index + l];
					}
					(*D)[State::et_index] -= (s.pot() / s.rho()) * dsum;
					(*D)[State::et_index] += angular * O;
				} else {
					(*D) += s.scf_source(pxc(i), pyc(j), lobe(i0, j0, k0));
				}
				(*D)[State::pot_index] = 0.0;
			}
		}
	}
	for (int i = 0; i < OCT_NCHILD; i++) {
		if (this->get_child(i) != NULL) {
			static_cast<Binary*> (get_child(i))->add_difs(a, b);
		}
	}
	if (get_level() == 0) {
		GridNode::add_difs(a, b);
	}
}

Real Binary::next_omega(Real* f, Real *df) const {
	Real df0, f0, dftmp, ftmp;
	const Real dx = get_dx();
	const Real dx3 = get_dx() * get_dx() * get_dx();
	const Grid& g = *this;
	if (f == NULL) {
		f = &f0;
		df = &df0;
	}
	dftmp = ftmp = 0.0;
#pragma omp parallel for collapse(2) reduction(+:dftmp,ftmp)
	for (int k = 1; k < PNX - 1; k++) {
		for (int j = 1; j < PNX - 1; j++) {
			for (int i = 1; i < PNX - 1; i++) {
				Real d1, d2;
				const int i0 = i + BW - 1;
				const int j0 = j + BW - 1;
				const int k0 = k + BW - 1;
				if (!zone_is_refined(i0, j0, k0)) {
					d1 = -pxc(i) * Binary::Omega * Binary::Omega;
					d2 = d1;
					d2 += (g(i0 + 1, j0, k0).enthalpy() - g(i0 - 1, j0, k0).enthalpy()) / dx / 2.0;
					d2 += (phi(i + 1, j, k) - phi(i - 1, j, k)) / dx / 2.0;
					dftmp += 2.0 * d1 / Binary::Omega * dx3 * g(i0, j0, k0).get_rho(1);
					ftmp += d2 * dx3 * g(i0, j0, k0).get_rho(1);
				}

			}
		}
	}
	*df = dftmp;
	*f = ftmp;
	for (int i = 0; i < OCT_NCHILD; i++) {
		if (this->get_child(i) != NULL) {
			static_cast<const Binary*> (get_child(i))->next_omega(f, df);
		}
	}
	return Binary::Omega - *f / *df;
}

Real Binary::sum_virial(Real* norm) const {
	Real s, norm0, n;
	const Real dx = get_dx();
	const Real dx3 = get_dx() * get_dx() * get_dx();
	n = 0.0;
	s = 0.0;
	norm0 = 0.0;
	if (norm == NULL) {
		norm = &norm0;
	}
#pragma omp parallel for collapse(2) reduction(+:s,n)
	for (int k = 1; k < PNX - 1; k++) {
		for (int j = 1; j < PNX - 1; j++) {
			for (int i = 1; i < PNX - 1; i++) {
				const int i0 = i + BW - 1;
				const int j0 = j + BW - 1;
				const int k0 = k + BW - 1;
				if (!zone_is_refined(i0, j0, k0)) {
					s += ((*this)(i0, j0, k0).et() + 0.25 * (*this)(i0, j0, k0).pot()) * dx3;
					n += ((*this)(i0, j0, k0).et() - 0.25 * (*this)(i0, j0, k0).pot()) * dx3;
				}
			}
		}
	}
	*norm = n;
	for (int i = 0; i < OCT_NCHILD; i++) {
		if (this->get_child(i) != NULL) {
			s += static_cast<const Binary*> (get_child(i))->sum_virial(norm);
		}
	}
	if (get_level() == 0) {
		s /= *norm;
	}
	return s;
}

Vector<Real, 4> Binary::find_l1(const Vector<Real, 4>& m1, const Vector<Real, 4>& m2, Vector<Real, 4>* v) const {
	Vector<Real, 4> v0 = -1.0e99;
	const Real O2 = Binary::Omega * Binary::Omega;
	const Real dx = get_dx();
	if (v == NULL) {
		v = &v0;
	}
#pragma omp parallel for collapse(2)
	for (int k = 1; k < PNX - 1; k++) {
		for (int j = 1; j < PNX - 1; j++) {
			Real x, y, phi0;
			for (int i = 1; i < PNX - 1; i++) {
				const int i0 = i + BW - 1;
				const int j0 = j + BW - 1;
				const int k0 = k + BW - 1;
				x = pxc(i);
				y = pyc(j);
				if (fabs(pzc(k)) > this->get_dx()) {
					continue;
				}
				if (fabs(pyc(j)) > this->get_dx()) {
					continue;
				}
				if ((m1[1] - x - 0.5 * dx) * (m2[1] - x + 0.5 * dx) > 0.0) {
					continue;
				}
				phi0 = phi(i, j, k) - 0.5 * (x * x + y * y) * O2;
				if (!this->poisson_zone_is_refined(i, j, k)) {
#pragma omp critical
					if (phi0 > (*v)[0]) {
						(*v)[0] = phi0;
						(*v)[1] = pxc(i);
						(*v)[2] = pyc(j);
						(*v)[3] = pzc(k);
					}

				}
			}
		}
	}
	for (int i = 0; i < OCT_NCHILD; i++) {
		if (this->get_child(i) != NULL) {
			*v = static_cast<const Binary*> (get_child(i))->find_l1(m1, m2, v);
		}
	}

	return *v;
}

void Binary::mark_lobes(Real l1, Real l1x, Real c1, Real c2) {
	const Real O2 = Binary::Omega * Binary::Omega;
#pragma omp parallel for collapse(2)
	for (int k = 1; k < PNX - 1; k++) {
		for (int j = 1; j < PNX - 1; j++) {
			Real x, y, z, phi0, nx, ny, nz;
			for (int i = 1; i < PNX - 1; i++) {
				const int i0 = i + BW - 1;
				const int j0 = j + BW - 1;
				const int k0 = k + BW - 1;
				x = pxc(i);
				y = pyc(j);
				z = pzc(k);
				phi0 = phi(i, j, k) - 0.5 * (x * x + y * y) * O2;
				lobe(i0, j0, k0) = 0;
				if (phi0 < l1) {
					nx = 0.5 * (fx(i, j, k) + fx(i + 1, j, k)) + x * O2;
					ny = 0.5 * (fy(i, j, k) + fy(i, j + 1, k)) + y * O2;
					nz = 0.5 * (fz(i, j, k) + fz(i, j, k + 1));
					if (x < l1x) {
						if (nx * (x - c2) + ny * y + nz * z < 0.0) {
							lobe(i0, j0, k0) = 2;
						}
					} else {
						if (nx * (x - c1) + ny * y + nz * z < 0.0) {
							lobe(i0, j0, k0) = 1;
						}
					}
				}
			}
		}
	}
	for (int i = 0; i < OCT_NCHILD; i++) {
		if (this->get_child(i) != NULL) {
			static_cast<Binary*> (get_child(i))->mark_lobes(l1, l1x, c1, c2);
		}
	}
}

Real Binary::find_K(Real phi0, int ln) const {
	Real K, m2;
	const Real O2 = Binary::Omega * Binary::Omega;
	const Real dx3 = get_dx() * get_dx() * get_dx();
	if (ln == 2) {
		m2 = Binary::M1 * Binary::q;
	} else {
		m2 = Binary::M1;
	}
#ifdef Z_REFLECT
	m2 /= 2.0;
#endif
	K = 0.0;
#pragma omp parallel for collapse(2) reduction(+:K)
	for (int k = 1; k < PNX - 1; k++) {
		for (int j = 1; j < PNX - 1; j++) {
			Real x, y, nx, ny, nz, phi1;
			for (int i = 1; i < PNX - 1; i++) {
				const int i0 = i + BW - 1;
				const int j0 = j + BW - 1;
				const int k0 = k + BW - 1;
				if (lobe(i0, j0, k0) == ln && !poisson_zone_is_refined(i, j, k)) {
					x = pxc(i);
					y = pyc(j);
					phi1 = phi(i, j, k) - 0.5 * (x * x + y * y) * O2;
					if (phi1 <= phi0) {
						K += pow(phi0 - phi1, Binary::n);
					}
				}
			}
		}
	}
	K *= dx3;
	K /= pow(Binary::n + 1.0, Binary::n) * m2;
	for (int i = 0; i < OCT_NCHILD; i++) {
		if (this->get_child(i) != NULL) {
			K += static_cast<const Binary*> (get_child(i))->find_K(phi0, ln);
		}
	}
	if (get_level() == 0) {
		K = pow(K, 1.0 / Binary::n);
	}
	return K;
}

Real Binary::find_phimax(Real rho_cut, int ln) const {
	Real phi_max;
	const Real O2 = Binary::Omega * Binary::Omega;
	const Real dx3 = get_dx() * get_dx() * get_dx();
	phi_max = -1.0e+99;
#pragma omp parallel for collapse(2)
	for (int k = 1; k < PNX - 1; k++) {
		for (int j = 1; j < PNX - 1; j++) {
			for (int i = 1; i < PNX - 1; i++) {
				Real x, y, phi1;
				const int i0 = i + BW - 1;
				const int j0 = j + BW - 1;
				const int k0 = k + BW - 1;
				if (lobe(i0, j0, k0) == ln && !poisson_zone_is_refined(i, j, k) && (*this)(i0, j0, k0).rho() > rho_cut) {
					x = pxc(i);
					y = pyc(j);
					phi1 = phi(i, j, k) - 0.5 * (x * x + y * y) * O2;
#pragma omp critical
					phi_max = max(phi_max, phi1);
				}
			}
		}
	}
	for (int i = 0; i < OCT_NCHILD; i++) {
		if (this->get_child(i) != NULL) {
			phi_max = max(phi_max, static_cast<const Binary*> (get_child(i))->find_phimax(rho_cut, ln));
		}
	}
	return phi_max;
}

Real Binary::find_phimin(Real rho_cut, int ln) const {
	Real phi_min;
	const Real O2 = Binary::Omega * Binary::Omega;
	const Real dx3 = get_dx() * get_dx() * get_dx();
	phi_min = +1.0e+99;
#pragma omp parallel for collapse(2)
	for (int k = 1; k < PNX - 1; k++) {
		for (int j = 1; j < PNX - 1; j++) {
			for (int i = 1; i < PNX - 1; i++) {
				Real x, y, phi1;
				const int i0 = i + BW - 1;
				const int j0 = j + BW - 1;
				const int k0 = k + BW - 1;
				if (lobe(i0, j0, k0) == ln && !poisson_zone_is_refined(i, j, k) && (*this)(i0, j0, k0).rho() > rho_cut) {
					x = pxc(i);
					y = pyc(j);
					phi1 = phi(i, j, k) - 0.5 * (x * x + y * y) * O2;
					phi_min = min(phi_min, phi1);
				}
			}
		}
	}
	for (int i = 0; i < OCT_NCHILD; i++) {
		if (this->get_child(i) != NULL) {
			phi_min = min(phi_min, static_cast<const Binary*> (get_child(i))->find_phimin(rho_cut, ln));
		}
	}
	return phi_min;
}

Real Binary::pot_sum() const {
	Real a0;
	const Real h3 = pow(get_dx(), 3);
	const Real O2 = Binary::Omega * Binary::Omega;
	const Real dx3 = get_dx() * get_dx() * get_dx();
	a0 = 0.0;
#pragma omp parallel for collapse(2) reduction(+:a0)
	for (int k = 1; k < PNX - 1; k++) {
		for (int j = 1; j < PNX - 1; j++) {
			Real ds;
			for (int i = 1; i < PNX - 1; i++) {
				if (!poisson_zone_is_refined(i, j, k)) {
					ds = 0.5 * phi(i, j, k) * (*this)(i + BW - 1, j + BW - 1, k + BW - 1).rho() * h3;
					a0 += ds;
				}
			}
		}
	}
	for (int i = 0; i < OCT_NCHILD; i++) {
		if (this->get_child(i) != NULL) {
			a0 += static_cast<const Binary*> (get_child(i))->pot_sum();
		}
	}
	return a0;
}

void Binary::M1M2data(binary_integrals_t* b) {
	if (get_level() == 0) {
		Vector<Real, 4> mf1 = mass_sum(0);
		Vector<Real, 4> mf2 = mass_sum(1);
		Vector<Real, 4> L1 = find_l1(mf1, mf2);
		mark_lobes(L1[0], L1[1], mf1[1], mf2[1]);
		b->jc = b->mc = b->m1 = b->m2 = b->js1 = b->js2 = 0.0;
		b->x = 0.0;
		b->xdot = 0.0;
		b->virial = 0.0;
		b->kinetic = 0.0;
		b->I1 = b->I2 = b->Ic = 0.0;
	}
	Real h3 = pow(get_dx(), 3);
	const Indexer2d indexer(BW, GNX - BW - 1, BW, GNX - BW - 1);
	int k, j, i;
	State s;
	_3Vec x;
	binary_integrals_t b0;
	b0.mc = b0.jc = b0.m1 = b0.m2 = b0.js1 = b0.js2 = b0.virial = b0.kinetic = 0.0;
	b0.x = 0.0;
	b0.xdot = 0.0;
	b0.I1 = b0.I2 = b0.Ic = 0.0;
	int l;
	for (int index = 0; index <= indexer.max_index(); index++) {
		k = indexer.y(index);
		j = indexer.x(index);
		for (i = BW; i < GNX - BW; i++) {
			if (!zone_is_refined(i, j, k)) {
				s = (*this)(i, j, k);
				x = X(i, j, k);
				if (lobe(i, j, k) == 1) {
					b0.m1 += s.rho() * h3;
					b0.x += x * s.rho() * h3;
					b0.xdot += s.V(x) * s.rho() * h3;
					b0.js1 += s.lz() * h3;
					b0.I1 += (x[0] * x[0] + x[1] * x[1]) * s.rho() * h3;
				} else if (lobe(i, j, k) == 2) {
					b0.m2 += s.rho() * h3;
					b0.x -= x * s.rho() * h3;
					b0.xdot -= s.V(x) * s.rho() * h3;
					b0.js2 += s.lz() * h3;
					b0.I2 += (x[0] * x[0] + x[1] * x[1]) * s.rho() * h3;
				}
				b0.mc += s.rho() * h3;
				b0.jc += s.lz() * h3;
				b0.virial += 2.0 * s.et() + 0.5 * s.pot();
				b0.kinetic += 2.0 * s.et();
				b0.Ic += (x[0] * x[0] + x[1] * x[1]) * s.rho() * h3;
			}
		}
	}
	for (int i = 0; i < OCT_NCHILD; i++) {
		if (this->get_child(i) != NULL) {
			static_cast<Binary*> (get_child(i))->M1M2data(b);
		}
	}
	b->Ic += b0.Ic;
	b->I1 += b0.I1;
	b->I2 += b0.I2;
	b->jc += b0.jc;
	b->mc += b0.mc;
	b->js1 += b0.js1;
	b->js2 += b0.js2;
	b->m1 += b0.m1;
	b->m2 += b0.m2;
	b->x += b0.x;
	b->xdot += b0.xdot;
	b->kinetic += b0.kinetic;
	b->virial += b0.virial;
	if (get_level() == 0) {
#ifdef Z_REFLECT
		b->x[2] = b->xdot[2] = 0.0;
#endif
		Real r1, r2, O, j1, j2;
		b->q = b->m2 / b->m1;
		b->x /= (2.0 * b->q / pow(b->q + 1.0, 2)) * (b->m1 + b->m2);
		b->xdot /= (2.0 * b->q / pow(b->q + 1.0, 2)) * (b->m1 + b->m2);
		b->a = sqrt((b->x).dot(b->x));
		O = (b->x[0] * b->xdot[1] - b->x[1] * b->xdot[0]) / (b->a * b->a);
		r1 = b->q / (1.0 + b->q) * b->a;
		r2 = 1.0 / (1.0 + b->q) * b->a;
		j1 = b->m1 * r1 * r1 * O;
		j2 = b->m2 * r2 * r2 * O;
		b->jorb = j1 + j2;
		b->js1 -= j1;
		b->js2 -= j2;
		b->I1 -= b->m1 * r1 * r1;
		b->I2 -= b->m2 * r2 * r2;
	}
}

void Binary::pot_to_grid() {
#pragma omp parallel for collapse(2)
	for (int k = 1; k < PNX - 1; k++) {
		for (int j = 1; j < PNX - 1; j++) {
			const int j0 = j + BW - 1;
			const int k0 = k + BW - 1;
			for (int i = 1; i < PNX - 1; i++) {
				const int i0 = i + BW - 1;
				(*this)(i0, j0, k0).set_pot(phi(i, j, k) * (*this)(i0, j0, k0).rho());
			}
		}
	}
	for (int i = 0; i < OCT_NCHILD; i++) {
		if (this->get_child(i) != NULL) {
			static_cast<Binary*> (get_child(i))->pot_to_grid();
		}
	}
}

void Binary::inject_from_parent(ChildIndex c) {
	GridNode::inject_from_parent(c);
	pot_from_grid();
}

void Binary::pot_from_grid() {
#pragma omp parallel for collapse(2)
	for (int k = 1; k < PNX - 1; k++) {
		for (int j = 1; j < PNX - 1; j++) {
			const int j0 = j + BW - 1;
			const int k0 = k + BW - 1;
			for (int i = 1; i < PNX - 1; i++) {
				const int i0 = i + BW - 1;
				phi(i, j, k) = (*this)(i0, j0, k0).pot() / (*this)(i0, j0, k0).rho();
			}
		}
	}
	for (int i = 0; i < OCT_NCHILD; i++) {
		if (this->get_child(i) != NULL) {
			static_cast<Binary*> (get_child(i))->pot_from_grid();
		}
	}
	if (get_level() == 0) {
		const int l1 = max_level();
		for (int l = 0; l <= l1; l++) {
			enforce_phi_boundaries(l);
		}
	}
}

void Binary::add_pot_et() {
#pragma omp parallel for collapse(2)
	for (int k = 1; k < PNX - 1; k++) {
		for (int j = 1; j < PNX - 1; j++) {
			Real e;
			const int j0 = j + BW - 1;
			const int k0 = k + BW - 1;
			for (int i = 1; i < PNX - 1; i++) {
				const int i0 = i + BW - 1;
				e = (*this)(i0, j0, k0).et();
				e += 0.5 * (*this)(i0, j0, k0).pot();
				(*this)(i0, j0, k0).set_et(e);
			}
		}
	}
	for (int i = 0; i < OCT_NCHILD; i++) {
		if (get_child(i) != NULL) {
			static_cast<Binary*> (get_child(i))->add_pot_et();
		}
	}
}

Binary* Binary::new_octnode() const {
	return new Binary;
}

void Binary::sub_pot_et() {
#pragma omp parallel for collapse(2)
	for (int k = 1; k < PNX - 1; k++) {
		for (int j = 1; j < PNX - 1; j++) {
			Real e;
			const int j0 = j + BW - 1;
			const int k0 = k + BW - 1;
			for (int i = 1; i < PNX - 1; i++) {
				const int i0 = i + BW - 1;
				e = (*this)(i0, j0, k0).et();
				e -= 0.5 * (*this)(i0, j0, k0).pot();
				(*this)(i0, j0, k0).set_et(e);
			}
		}
	}
	for (int i = 0; i < OCT_NCHILD; i++) {
		if (get_child(i) != NULL) {
			static_cast<Binary*> (get_child(i))->sub_pot_et();
		}
	}
}

void Binary::compute_physical_boundaries(Binary* root) {
	for (int f = 0; f < OCT_NSIB; f++) {
		if (is_phys_bound(f)) {
			static_cast<PoissonPhysBound*> (get_sibling(f))->compute_boundaries(root);
		}
	}
	for (int i = 0; i < OCT_NCHILD; i++) {
		if (this->get_child(i) != NULL) {
			static_cast<Binary*> (get_child(i))->compute_physical_boundaries(root);
		}
	}

}

Real Binary::compute_phi(Real x, Real y, Real z) const {
	Real sum, alpha;
	alpha = 1.0;
#ifdef Z_REFLECT
	alpha *= 2.0;
#endif
	sum = 0.0;
	for (int i = 0; i < 8; i++) {
		Real dx, dy, dz;
		dx = x - src_x[i];
		dy = y - src_y[i];
		dz = z - src_z[i];
		if (!all_refined) {
			sum -= alpha * src_0[i] / sqrt(dx * dx + dy * dy + dz * dz);
		} else {
			sum = 0.0;
		}
	}
	for (int i = 0; i < OCT_NCHILD; i++) {
		if (this->get_child(i) != NULL) {
			sum += static_cast<const Binary*> (get_child(i))->compute_phi(x, y, z);
		}
	}
	return sum;
}

void Binary::compute_source_sums() {
	const Real h3 = get_dx() * get_dx() * get_dx();
	Real s0[8], sx[8], sy[8], sz[8];
	int k, j, i;
	for (int i = 0; i < 8; i++) {
		s0[i] = sx[i] = sy[i] = sz[i] = 0.0;
	}
	all_refined = true;
	for (int k = 1; k < PNX - 1; k++) {
		for (int j = 1; j < PNX - 1; j++) {
			for (int i = 1; i < PNX - 1; i++) {
				if (!poisson_zone_is_refined(i, j, k)) {
					all_refined = false;
					const int ci = i / (PNX / 2) + ((j / (PNX / 2)) << 1) + ((k / (PNX / 2)) << 2);
					s0[ci] += S(i, j, k) * h3;
					sx[ci] += S(i, j, k) * pxc(i) * h3;
					sy[ci] += S(i, j, k) * pyc(j) * h3;
					sz[ci] += S(i, j, k) * pzc(k) * h3;
				}
			}
		}
	}
	for (int i = 0; i < 8; i++) {
		if (!all_refined && s0[i] != 0.0) {
			src_x[i] = sx[i] / s0[i];
			src_y[i] = sy[i] / s0[i];
			src_z[i] = sz[i] / s0[i];
			src_0[i] = s0[i] / (4.0 * M_PI);
		} else {
			src_0[i] = 0.0;
			src_x[i] = src_y[i] = src_z[i] = 1.0;
		}
	}
	for (i = 0; i < OCT_NCHILD; i++) {
		if (this->get_child(i) != NULL) {
			static_cast<Binary*> (get_child(i))->compute_source_sums();
		}
	}
}

Real Binary::max_dt() const {
	if (Binary::scf_code) {
		return Binary::scf_dt;
	} else {
		return GridNode::max_dt();
	}
}

Binary::Binary() :
	Poisson() {
	// TODO Auto-generated constructor stub

}

Binary::~Binary() {
	// TODO Auto-generated destructor stub
}

_3Vec Binary::V(int i, int j, int k) const {
	_3Vec v;
	v[0] = -yc(j) * Binary::Omega;
	v[1] = +xc(i) * Binary::Omega;
	v[2] = 0.0;
	return v;
}

_3Vec Binary::Vfx(int i, int j, int k) const {
	_3Vec v;
	v[0] = -yc(j) * Binary::Omega;
	v[1] = +xf(i) * Binary::Omega;
	v[2] = 0.0;
	return v;
}

_3Vec Binary::Vfy(int i, int j, int k) const {
	_3Vec v;
	v[0] = -yf(j) * Binary::Omega;
	v[1] = +xc(i) * Binary::Omega;
	v[2] = 0.0;
	return v;
}

_3Vec Binary::Vfz(int i, int j, int k) const {
	return V(i, j, k);
}
#endif
